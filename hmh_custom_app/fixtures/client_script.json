[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-08-17 15:40:09.011390",
  "module": "HMH CUSTOM APP",
  "name": "testing",
  "script": "frappe.ui.form.on('Patient', {\n    refresh: function (frm) {\n\n        var consultation_item = \"Consultation\";\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Item',\n                filters: { item_group: consultation_item },\n                limit: 1\n            },\n            callback: function (response) {\n                if (response.message && response.message.length > 0) {\n                    frm.set_query('custom_consultation', function () {\n                        return {\n                            filters: { item_group: consultation_item }\n                        };\n                    });\n                }\n            }\n        });\n\n\n        // Ensure this runs after the form is loaded or when appropriate\n        if (!frm.doc.__islocal) {  // Ensure the buttons are not shown on a new document\n            checkUserRoleAndAddButtons(frm);\n        }\n  \n    },\n    \n      custom_consultation: function (frm) {\n        if (frm.doc.custom_consultation) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Item Price',\n                    filters: {\n                        item_code: frm.doc.custom_consultation,\n                        price_list: frm.doc.default_price_list,\n                        selling: 1\n                    },\n                    fieldname: 'price_list_rate'\n                },\n                callback: function (response) {\n                    if (response.message) {\n                        frm.set_value('custom_fee', response.message.price_list_rate);\n                    }\n                }\n            });\n        }\n    },\n    custom_patient_mrno: function (frm) {\n        if (frm.doc.custom_patient_mrno) {\n            // Fetch the Patient Registration Identification linked by custom_patient_mrno\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Patient Registration Identification',\n                    filters: { 'name': frm.doc.custom_patient_mrno },\n                    fields: ['name', 'customer', 'visit']\n                },\n                callback: function (response) {\n                    let patient_reg_id = response.message;\n                    if (patient_reg_id && patient_reg_id.length > 0) {\n                        let patient_reg_doc_name = patient_reg_id[0].name;\n                        // Fetch the Patient Registration Identification document\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Patient Registration Identification',\n                                name: patient_reg_doc_name\n                            },\n                            callback: function (response) {\n                                let patient_reg_doc = response.message;\n                                if (patient_reg_doc) {\n                                    if (!patient_reg_doc.customer) {\n                                        // Update the customer field in Patient Registration Identification visit \n                                        patient_reg_doc.visit = \"First Time Visit\";\n                                        frappe.call({\n                                            method: 'frappe.client.save',\n                                            args: {\n                                                doc: patient_reg_doc\n                                            },\n                                            callback: function (response) {\n                                                console.log('Patient Registration Identification updated successfully');\n                                            }\n                                        });\n                                    }\n\n                                    if (patient_reg_doc.customer && patient_reg_doc.visit) {\n                                        // Set the custom patient field in the Patient doctype\n                                        frm.set_value('re_attendance', 'Existing Customer');\n                                        frm.set_value('custom_attendance', 'Re-Attendance');\n                                        frm.set_value('customer', patient_reg_doc.customer);\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    }\n})\n\n\nfunction handlePayment(frm, payment_type) {\n    let method = payment_type === 'pay_later'\n        ? 'hmh_custom_app.custom_api.sales_invoice.collect_invoices'\n        : 'hmh_custom_app.custom_api.sales_invoice.collect_invoices';\n\n    frappe.call({\n        method: method,\n        args: {\n            patient: frm.doc.name\n        },\n        callback: function (r) {\n            if (r.message) {\n                if (r.message.error) {\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: r.message.error\n                    });\n                } else {\n                    frappe.msgprint({\n                        title: __('Success'),\n                        indicator: 'green',\n                        message: r.message.message\n                    });\n                }\n            } else {\n                frappe.msgprint({\n                    title: __('Information'),\n                    indicator: 'orange',\n                    message: __('No response message received.')\n                });\n            }\n        },\n        error: function (err) {\n            frappe.msgprint({\n                title: __('Error'),\n                indicator: 'red',\n                message: __('An error occurred: ' + err.message)\n            });\n        }\n    });\n}\n\nfunction checkUserRoleAndAddButtons(frm) {\n    // Check if the customer group on the patient is \"Insurance\"\n    if (frm.doc.customer_group === \"Insurance\") {\n        // Hide \"Pay Now\" and \"Pay Later\" buttons\n        frm.remove_custom_button(__('Pay Now'));\n        frm.remove_custom_button(__('Pay Later'));\n\n        // Show \"Create Bill\" button\n        frm.add_custom_button(__('Create Bill'), function () {\n            createBill(frm);\n        });\n    } else {\n        // If the customer group is not \"Insurance\", proceed with existing role-based button logic\n        frappe.call({\n            method: 'hmh_custom_app.custom_api.get_role.get_user_roles',\n            args: {},\n            callback: function (r) {\n                if (r.message) {\n                    // Add \"Pay Now\" button for all users\n                    frm.add_custom_button(__('Pay Now'), function () {\n                        handlePayment(frm, 'pay_now');\n                    });\n\n                    if (r.message.roles.includes('Pay Later')) {\n                        // Add \"Pay Later\" button if the user has the role\n                        frm.add_custom_button(__('Pay Later'), function () {\n                            handlePayment(frm, 'pay_later');\n                        });\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Information'),\n                        indicator: 'orange',\n                        message: __('No user roles received.')\n                    });\n                }\n            },\n            error: function (err) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('An error occurred while fetching user roles: ' + err.message)\n                });\n            }\n        });\n    }\n}\n\nfunction createBill(frm) {\n    // Define the method to call\n    let method = 'hmh_custom_app.custom_api.sales_invoice.collect_invoices';\n\n    // Make the server call to collect invoices\n    frappe.call({\n        method: method,\n        args: {\n            patient: frm.doc.name\n        },\n        callback: function (r) {\n            if (r.message) {\n                if (r.message.error) {\n                    // Display an error message if there is an error\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: r.message.error\n                    });\n                } else {\n                    // Display a success message if the operation is successful\n                    frappe.msgprint({\n                        title: __('Success'),\n                        indicator: 'green',\n                        message: r.message.message\n                    });\n                }\n            } else {\n                // Handle case where there is no message in the response\n                frappe.msgprint({\n                    title: __('Information'),\n                    indicator: 'orange',\n                    message: __('No response message received.')\n                });\n            }\n        },\n        error: function (err) {\n            // Handle any errors that occur during the call\n            frappe.msgprint({\n                title: __('Error'),\n                indicator: 'red',\n                message: __('An error occurred: ' + err.message)\n            });\n        }\n    });\n}\n\nfunction update_patient_bill_status(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.patient.update_patient_bill_status',\n        args: {\n            'custom_payment_id': frm.doc.name\n        },\n        callback: function(response) {\n            if (response.message) {\n                frappe.msgprint(response.message);\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-07 11:31:43.391087",
  "module": "HMH CUSTOM APP",
  "name": "Patient Bills",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_get_patients_bill: function(frm) {\r\n        update_custom_items_table(frm);\r\n    },\r\n    custom_get_bills: function(frm) {\r\n        update_items_table(frm);\r\n    },\r\n    custom_view_traige: function(frm) {\r\n        viewTriage(frm);\r\n    },\r\n\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Expense Claim Items', {\r\n    amount: function (frm, cdt, cdn) {\r\n        calculateTotalsTransfers(frm);\r\n    }\r\n});\r\nfrappe.ui.form.on('drug_prescription', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n        if (frm.doc.price_list) {\r\n            frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.price_list);\r\n        }\r\n    }\r\n});\r\n\r\nfunction update_custom_items_table(frm) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.patient_encounter.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message.status === 'success') {\r\n                frappe.msgprint(r.message.message);\r\n                // Refresh the custom_items table to reflect the changes\r\n                frm.refresh_field('custom_items');\r\n                // Reload the page\r\n                 location.reload();\r\n            } else {\r\n                frappe.msgprint(__('Error: ') + r.message.message);\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n        }\r\n    });\r\n}\r\n\r\nfunction update_items_table(frm) {\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.encounter.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message.status === 'success') {\r\n                frm.set_value('custom_total_amount', r.message.sums.drug_sum);\r\n                frm.set_value('custom_total_investigations', r.message.sums.lab_test_sum);\r\n                frm.set_value('custom_total_clinical_procedures', r.message.sums.procedure_sum);\r\n                frm.set_value('custom_total_therapies', r.message.sums.therapy_sum);\r\n                frm.set_value('custom_total_service_request', r.message.sums.service_sum);\r\n                 frm.save();\r\n                 \r\n            } else {\r\n                frappe.msgprint(__('Error: ') + r.message.message);\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// Function to navigate to the Vital Signs form\r\nfunction viewTriage(frm) {\r\n    // Check if the form object and doc are valid\r\n    console.log(\"Iseee youiyh\")\r\n    if (frm && frm.doc) {\r\n        // Check if custom_vitals_id exists in the doc\r\n        if (frm.doc.custom_vitals_id) {\r\n            // Navigate to the Vital Signs form with the given custom_vitals_id\r\n            frappe.set_route('Form', 'Vital Signs', frm.doc.custom_vitals_id);\r\n        } else {\r\n            // Display a message if custom_vitals_id is not found\r\n            frappe.msgprint(__('No Vitals ID found.'));\r\n        }\r\n    } else {\r\n        // Display an error message if frm or frm.doc is not valid\r\n        frappe.msgprint(__('Form object or document is invalid.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Registration Identification",
  "enabled": 1,
  "modified": "2024-08-07 09:31:57.436721",
  "module": "HMH CUSTOM APP",
  "name": "Customer FIilters",
  "script": "frappe.ui.form.on('Patient Registration Identification', {\r\n    customer_group: function(frm) {\r\n        // Clear the customer field\r\n        frm.set_value('customer', '');\r\n        \r\n        // Set the filter for the customer field based on the selected customer group\r\n        if (frm.doc.customer_group) {\r\n            frm.set_query('customer', function() {\r\n                return {\r\n                    filters: {\r\n                        'customer_group': frm.doc.customer_group\r\n                    }\r\n                };\r\n            });\r\n        } else {\r\n            frm.set_query('customer', function() {\r\n                return {\r\n                    filters: {}\r\n                };\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-08 14:34:06.406004",
  "module": "HMH CUSTOM APP",
  "name": "Request for vitals",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_request_for_another_vitals: function(frm) {\r\n        requestTriage(frm);\r\n    },\r\n});\r\n\r\nfunction requestTriage(frm) {\r\n    // Check if the form object and doc are valid\r\n    if (frm && frm.doc) {\r\n        // Create a new Vital Signs document\r\n        frappe.model.with_doctype('Vital Signs', function() {\r\n            let vital_sign_doc = frappe.model.get_new_doc('Vital Signs');\r\n\r\n            // Set the fields from the Patient Encounter to the new Vital Signs document\r\n            vital_sign_doc.patient = frm.doc.patient;\r\n            vital_sign_doc.patient_name = frm.doc.patient_name;\r\n            vital_sign_doc.custom_practionaer = frm.doc.practitioner;\r\n            vital_sign_doc.custom_encounter_id = frm.doc.name;\r\n            vital_sign_doc.custom_patient_status = 'Doctor\\'s Request';\r\n\r\n            // Insert the new document into the database without routing\r\n            frappe.db.insert(vital_sign_doc).then(function(doc) {\r\n                frappe.msgprint(__('Your Vital Signs Request Sent successfully.'));\r\n            }).catch(function(error) {\r\n                frappe.msgprint(__('Failed to create Vital Signs document.'));\r\n                console.error(error);\r\n            });\r\n        });\r\n    } else {\r\n        // Display an error message if frm or frm.doc is not valid\r\n        frappe.msgprint(__('Form object or document is invalid.'));\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-11 17:41:27.790242",
  "module": "HMH CUSTOM APP",
  "name": "Get the amount Prescribed",
  "script": "frappe.ui.form.on('Drug Prescription', {\r\n    period: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    },\r\n    dosage: function(frm, cdt, cdn) {\r\n        var item = frappe.get_doc(cdt, cdn);\r\n\r\n        // Check if the period field has a value\r\n        if (item.period) {\r\n            if (frm.doc.custom_price_list) {\r\n                console.log(\"Price list found:\", frm.doc.custom_price_list);\r\n                frappe.model.set_value(cdt, cdn, 'price_list', frm.doc.custom_price_list);\r\n\r\n                // Call the function to update the amount based on the item selected\r\n                update_item_amount(frm, item, cdt, cdn);\r\n            } else {\r\n                console.log(\"No price list found.\");\r\n            }\r\n        } else {\r\n            console.log(\"Period is not selected.\");\r\n   \r\n        }\r\n    }\r\n});\r\n\r\nfunction update_item_amount(frm, item, cdt, cdn) {\r\n    console.log(\"Calling server method to update amount...\");\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.drug_priscription.on_submit',\r\n        args: {\r\n            patient_encounter: frm.doc.name,\r\n            selected_drug_code: item.drug_code, // Make sure to pass the selected drug code\r\n            dosage: item.dosage,\r\n            period: item.period,\r\n        },\r\n        callback: function(r) {\r\n            console.log(\"Server response:\", r);\r\n            if (r.message) {\r\n                var selected_item_amount = r.message.selected_item_amount;\r\n                var qty = r.message.qty;\r\n                var rate = r.message.rate;\r\n\r\n                // Set the amount for the current drug_prescription item\r\n                frappe.model.set_value(cdt, cdn, 'custom_amount', selected_item_amount);\r\n                frappe.model.set_value(cdt, cdn, 'custom_qty', qty);\r\n                frappe.model.set_value(cdt, cdn, 'custom_rate', rate);\r\n\r\n                // Optionally, you can also set the rate if needed\r\n                frappe.model.set_value(cdt, cdn, 'rate', item.rate || 0);\r\n\r\n        } else {\r\n                frappe.msgprint(__('Error: ') + (r.message ? r.message.message : 'Unknown error'));\r\n            }\r\n        },\r\n        error: function(r) {\r\n            frappe.msgprint(__('Server call failed.'));\r\n            console.error(\"Server call failed:\", r);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-10 13:02:49.134629",
  "module": "HMH CUSTOM APP",
  "name": "Set Due Date",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    encounter_date: function(frm) {\r\n        // Calculate the due date as posting date + 30 days\r\n        var postingDate = new Date(frm.doc.encounter_date);\r\n        postingDate.setDate(postingDate.getDate() + 30);\r\n        \r\n        // Format the date to YYYY-MM-DD\r\n        var dueDate = postingDate.toISOString().split('T')[0];\r\n\r\n        // Set the due date in the form\r\n        frm.set_value('custom_due_date', dueDate);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-13 14:50:34.902389",
  "module": "HMH CUSTOM APP",
  "name": "Wipe all",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    custom_remove_drug_status: function(frm) {\r\n     \r\n    wipe_custom_drug_status(frm);\r\n    \r\n    }\r\n});\r\n\r\nfunction wipe_custom_drug_status(frm) {\r\n    // Iterate through each item in the drug prescription\r\n    frm.doc.drug_prescription.forEach(function(item) {\r\n        // Set the `custom_drug_status` field to an empty value\r\n        item.custom_drug_status = '';\r\n    });\r\n    \r\n    // Refresh the field to reflect changes in the UI\r\n    frm.refresh_field('drug_prescription');\r\n    \r\n    // Optionally, save the document if you want to persist changes\r\n    frm.save();\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2024-08-15 15:22:54.774107",
  "module": "HMH CUSTOM APP",
  "name": "Update status Lab",
  "script": "frappe.ui.form.on('Lab Test', {\n    on_submit: function(frm) {\n        update_lab_test_prescription(frm);\n       }\n    });\n\n\nfunction update_lab_test_prescription(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.labtest.lab_test.lab_status',\n        args: {\n            'docname': frm.doc.name\n        },\n        callback: function(response) {\n            console.log(response)\n            // if (response.message) {\n            //     frappe.msgprint(response.message); \n            // }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2024-08-15 17:27:30.430583",
  "module": "HMH CUSTOM APP",
  "name": "Href Results",
  "script": "frappe.ui.form.on('Patient Encounter', {\r\n    refresh: function(frm) {\r\n        // Check if the form is loaded with lab_test_prescription table\r\n        if (frm.doc.lab_test_prescription && frm.fields_dict['lab_test_prescription']) {\r\n            frm.doc.lab_test_prescription.forEach(function(row) {\r\n                if (row.custom_results_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['lab_test_prescription'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.custom_results_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the lab test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Lab Test', row.custom_labtest_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"custom_results_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check if the form is loaded with custom_radiology_items table\r\n        if (frm.doc.custom_radiology_items && frm.fields_dict['custom_radiology_items']) {\r\n            frm.doc.custom_radiology_items.forEach(function(row) {\r\n                if (row.results_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['custom_radiology_items'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.results_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the observation test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Observation', row.observe_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"results_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check if the form is loaded with procedure_prescription table\r\n        if (frm.doc.procedure_prescription && frm.fields_dict['procedure_prescription']) {\r\n            frm.doc.procedure_prescription.forEach(function(row) {\r\n                if (row.custom_proceding_status === \"Results Ready\") {\r\n                    // Get the row element in the grid\r\n                    let row_element = frm.fields_dict['procedure_prescription'].grid.get_row(row.name).row;\r\n                    \r\n                    // Create a clickable span element\r\n                    let clickable_span = $(`<span style=\"color:blue;cursor:pointer;\">${row.custom_proceding_status}</span>`);\r\n\r\n                    // Attach the click event to navigate to the Procedure test document\r\n                    clickable_span.on('click', function() {\r\n                        frappe.set_route('Form', 'Clinical Procedure', row.custom_procedure_id);\r\n                    });\r\n\r\n                    // Replace the text in the grid with the clickable span\r\n                    $(row_element).find(`[data-fieldname=\"custom_proceding_status\"]`).html(clickable_span);\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Observation",
  "enabled": 1,
  "modified": "2024-08-15 16:35:42.429695",
  "module": "HMH CUSTOM APP",
  "name": "Update Obseve  Status",
  "script": "frappe.ui.form.on('Observation', {\n    on_submit: function(frm) {\n        update_custom_radiology_items(frm);\n       }\n    });\n\n\nfunction update_custom_radiology_items(frm) {\n    // Call the server-side method to update patient bill status\n    frappe.call({\n        method: 'hmh_custom_app.custom_api.labtest.radiology.radiology_status',\n        args: {\n            'docname': frm.doc.name\n        },\n        callback: function(response) {\n            console.log(response)\n            if (response.message) {\n                frappe.msgprint(response.message); \n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure",
  "enabled": 1,
  "modified": "2024-08-15 17:50:41.787604",
  "module": "HMH CUSTOM APP",
  "name": "Procedure Status Update",
  "script": "frappe.ui.form.on('Clinical Procedure', {\r\n    refresh: function(frm) {\r\n        // Check if the status is 'Completed' and add a button to update prescriptions\r\n        if (frm.doc.status === 'Completed' && frm.doc.docstatus === 1) {\r\n                frm.add_custom_button(__('Send Results To Doctor'), function() {\r\n                update_procedure_prescription(frm);\r\n            });\r\n        }\r\n    },\r\n     on_submit: function(frm) {\r\n        update_procedure_prescription(frm);\r\n       }\r\n    \r\n});\r\n\r\nfunction update_procedure_prescription(frm) {\r\n    // Call the server-side method to update patient prescription status\r\n    frappe.call({\r\n        method: 'hmh_custom_app.custom_api.labtest.procedure.procedure_status',\r\n        args: {\r\n            'docname': frm.doc.name\r\n        },\r\n        callback: function(response) {\r\n            console.log(response);\r\n            if (response.message) {\r\n                frappe.msgprint(response.message); \r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2024-08-16 16:50:35.964732",
  "module": "HMH CUSTOM APP",
  "name": "Set DOB",
  "script": "frappe.ui.form.on('Patient', {\r\n    custom_patient_mrno: function(frm) {\r\n        if (frm.doc.custom_patient_mrno) {\r\n            // Fetch the Patient Registration Identification record\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Patient Registration Identification',\r\n                    filters: {\r\n                        // Assuming 'mrno' is the field in Patient Registration Identification\r\n                        // that corresponds to custom_patient_mrno\r\n                        'name': frm.doc.custom_patient_mrno\r\n                    }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        // Set the date_of_birth from the fetched record\r\n                        frm.set_value('dob', r.message.date_of_birth);\r\n                        \r\n                        // Fetch the patient_name\r\n                        frappe.db.get_value('Patient Registration Identification', frm.doc.custom_patient_mrno, 'patient_name')\r\n                        .then(r => {\r\n                            if (r.message && r.message.patient_name) {\r\n                                let patient_name = r.message.patient_name;\r\n                                let name_parts = patient_name.split(' ');\r\n\r\n                                // Splitting the name into first, middle, and last names\r\n                                if (name_parts.length === 2) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('last_name', name_parts[1]);\r\n                                    frm.set_value('middle_name', '');\r\n                                } else if (name_parts.length === 3) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('middle_name', name_parts[1]);\r\n                                    frm.set_value('last_name', name_parts[2]);\r\n                                } else if (name_parts.length > 3) {\r\n                                    frm.set_value('first_name', name_parts[0]);\r\n                                    frm.set_value('last_name', name_parts[name_parts.length - 1]);\r\n                                    frm.set_value('middle_name', name_parts.slice(1, -1).join(' '));\r\n                                } else {\r\n                                    frm.set_value('first_name', patient_name);\r\n                                    frm.set_value('middle_name', '');\r\n                                    frm.set_value('last_name', '');\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    } else {\r\n                        // If no matching record is found, clear the date_of_birth\r\n                        frm.set_value('dob', null);\r\n                        frappe.msgprint(__('No matching Patient Registration Identification found.'));\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // If custom_patient_mrno is cleared, clear the date_of_birth and name fields\r\n            frm.set_value('dob', null);\r\n            frm.set_value('first_name', null);\r\n            frm.set_value('middle_name', null);\r\n            frm.set_value('last_name', null);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]